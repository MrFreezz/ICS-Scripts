
//
// ICS process macro
//

// Assign macro name
MacroName = "PCR8Well";

// Assign version
// 1.00 - RRM initial version
// 1.01 - rrm add support for 8 well PCR with retries on optics reads
// 1.02 - rrm add check for robot position
MacroVersion = "1.02";

// Include show properties
#include <c:\\ICSMacros\\ICSShowProps.pmc>

// Enable debug output
DebugOutput = true;
// set the process bay
propProcessBay = 1;
// Announce who we are
Debug( "***************************************************************" );
Debug( "V" + MacroVersion );

// Call this to show the passed in property values
ShowProperties();

try
{
	OutputLabel.text = MacroName + " - TEC10-17" + propCycTECCycles + " from: " + propCycTECLoSP + " to: " + propCycTECHiSP;
  //Delete any output files if they exist
  outDeleteOutputFile("VolpiOutputTEC1Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC1Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC2Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC2Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC3Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC3Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC4Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC4Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC5Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC5Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC6Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC6Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC7Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC7Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC8Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC8Ch3.txt");
  outDeleteOutputFile("ThermoCouple1.txt");
  //create Baseline arrays
  var ArrOpticsCh1BaseLine = new Array(0,0,0,0,0,0,0,0);
  var ArrOpticsCh3BaseLine = new Array(0,0,0,0,0,0,0,0);

  // Move Robot to first well
  rbtMoveBothAbsolute(8910,115,0);
  //Enzyme Activation
  TECtoTarget(propCycTECHiSP, propCycTECHiRR);
  //Hold for 3 minutes
  TECDwell(180);  
	// Run the cycles
	for( cycle=1; cycle<=propCycTECCycles; cycle++ )
	{
		Debug( "TEC10-17 cycle " + cycle + " of " + propCycTECCycles );
	
		// Get TEC to Hi
		OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 to " + propCycTECHiSP;
		TECtoTarget( propCycTECHiSP, propCycTECHiRR );

		// Dwell TEC at high
		OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 dwell " + propCycTECHiDW;
		TECDwell( propCycTECHiDW );

		// Get TEC to Low
		OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 to " + propCycTECLoSP;
		TECtoTarget( propCycTECLoSP, propCycTECLoRR );
		// Dwell TEC at low
		OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 dwell " + propCycTECLoDW;
		TECDwell( propCycTECLoDW );
   for(TecNum = 0;TecNum<8;TecNum++)
   {
     //Check robot position
	   CheckRobotPosition(TecNum);
     //Take an optics reading
     if(optMeasure("1",0.300)==true)
     {
       opticsChannel1 = optGetMeasureMean();
       ArrOpticsCh1BaseLine[TecNum] += opticsChannel1;
       Debug("TEC1"+(TecNum)+" Channel 1 Optics Measurement " + opticsChannel1);
       filename = "VolpiOutputTEC"+(TecNum + 1)+"Ch1.txt";
       outAppendToOutputFile(filename,opticsChannel1+",");
       if(optMeasure("3",0.300)==true)
       {
         opticsChannel3 = optGetMeasureMean();
         ArrOpticsCh3BaseLine[TecNum] += opticsChannel3;
         Debug("TEC1"+(TecNum)+" Channel 3 Optics Measurement " + opticsChannel3);
         filename = "VolpiOutputTEC"+(TecNum+1)+"Ch3.txt";
         outAppendToOutputFile(filename,opticsChannel3+",");
       }else{
         Debug("Optical Measurement returned FALSE (CH3)-retry...");
         if(optMeasure("3",0.300)==true)
         {
           opticsChannel3 = optGetMeasureMean();
           ArrOpticsCh3BaseLine[TecNum] += opticsChannel3;
           Debug("TEC1"+(TecNum)+" Channel 3 Optics Measurement " + opticsChannel3);
           filename = "VolpiOutputTEC"+(TecNum+1)+"Ch3.txt";
           outAppendToOutputFile(filename,opticsChannel3+",");
         }
       }
       //on the 5th cycle, compute average baseline
       if(cycle == 5)
       {
         ArrOpticsCh1BaseLine[TecNum] = ArrOpticsCh1BaseLine[TecNum]/5;
         ArrOpticsCh3BaseLine[TecNum] = ArrOpticsCh3BaseLine[TecNum]/5;
         Debug("TEC1"+(TecNum)+" Average Baseline CH1 " + ArrOpticsCh1BaseLine[TecNum]);
         Debug("TEC1"+(TecNum)+" Average BaseLine CH3 " + ArrOpticsCh3BaseLine[TecNum]);
       }
     }else{
       Debug("Optical Measurement returned FALSE (CH1)-retry...");
       if(optMeasure("1",0.300)==true)
       {
         opticsChannel1 = optGetMeasureMean();
         ArrOpticsCh1BaseLine[TecNum] += opticsChannel1;
         Debug("TEC1"+(TecNum)+" Channel 1 Optics Measurement " + opticsChannel1);
         filename = "VolpiOutputTEC"+(TecNum + 1)+"Ch1.txt";
         outAppendToOutputFile(filename,opticsChannel1+",");
         if(optMeasure("3",0.300)==true)
         {
           opticsChannel3 = optGetMeasureMean();
           ArrOpticsCh3BaseLine[TecNum] += opticsChannel3;
           Debug("TEC1"+(TecNum)+" Channel 3 Optics Measurement " + opticsChannel3);
           filename = "VolpiOutputTEC"+(TecNum+1)+"Ch3.txt";
           outAppendToOutputFile(filename,opticsChannel3+",");
         }else{
           Debug("Optical Measurement returned FALSE (CH3)-retry...");
           if(optMeasure("3",0.300)==true)
           {
             opticsChannel3 = optGetMeasureMean();
             ArrOpticsCh3BaseLine[TecNum] += opticsChannel3;
             Debug("TEC1"+(TecNum)+" Channel 3 Optics Measurement " + opticsChannel3);
             filename = "VolpiOutputTEC"+(TecNum+1)+"Ch3.txt";
             outAppendToOutputFile(filename,opticsChannel3+",");
           }
         }
         //on the 5th cycle, compute average baseline
         if(cycle == 5)
         {
           ArrOpticsCh1BaseLine[TecNum] = ArrOpticsCh1BaseLine[TecNum]/5;
           ArrOpticsCh3BaseLine[TecNum] = ArrOpticsCh3BaseLine[TecNum]/5;
           Debug("TEC1"+(TecNum)+" Average Baseline CH1 " + ArrOpticsCh1BaseLine[TecNum]);
           Debug("TEC1"+(TecNum)+" Average BaseLine CH3 " + ArrOpticsCh3BaseLine[TecNum]);
         }
       }      
     }
     if(TecNum < 7)
     {
       //move to next well
       rbtMoveYRelative(790,0);
     }else{
       rbtMoveBothAbsolute(8910,115,0);//back to well 10
     }
     //delay
     tmrDelay(1000);   
   }
	// Lag TEC at Lo
	TECLag( propCycTECLoLT );
	}
}
finally
{
	// When done turn off the TEC
	tecEnable( "TEC10", false );
  tecEnable( "TEC11", false );
  tecEnable( "TEC12", false );
  tecEnable( "TEC13", false );
	tecEnable( "TEC14", false );
  tecEnable( "TEC15", false );
  tecEnable( "TEC16", false );
  tecEnable( "TEC17", false );
  //Home the robot
  rbtHomeBoth(0);
	OutputLabel.text = MacroName + " - Complete";
}

function CheckRobotPosition(index)
{
  currentYpos = rbtGetYPosition();
  correctYpos = 115 + index * 790;
  if((currentYpos > (correctYpos - 10))&&(currentYpos < (correctYpos + 10)))
  {
    Debug("Robot @ Correct position");
  }
  else
  {
    Debug("ERROR! - Robot @ position " + currentYpos);
    rbtMoveBothAbsolute(8910,correctYpos,0);
    tmrDelay(1000); 
  }
}

function TECtoTarget( target, ramprate )
{
	Debug( "TEC10-17 to " + target + " @ " + ramprate );

  tecSetPoint( "TEC10", target, ramprate );
  tecSetPoint( "TEC11", target, ramprate );
  tecSetPoint( "TEC12", target, ramprate );
  tecSetPoint( "TEC13", target, ramprate );
  tecSetPoint( "TEC14", target, ramprate );
  tecSetPoint( "TEC15", target, ramprate );
  tecSetPoint( "TEC16", target, ramprate );
  tecSetPoint( "TEC17", target, ramprate );

  tecEnable( "TEC10", true );
  tecEnable( "TEC11", true );
  tecEnable( "TEC12", true );
  tecEnable( "TEC13", true );
  tecEnable( "TEC14", true );
  tecEnable( "TEC15", true );
  tecEnable( "TEC16", true );
  tecEnable( "TEC17", true );	
	templo = target-2;
	temphi = target+2;
	temp = -900;
	while( (temp<=templo) || (temp>=temphi) )
	{
	  temp = tecReadTemperature( "TEC10" );
    ThermoCouple1 = mccReadTemperature("0",0,0);
    outAppendToOutputFile("ThermoCouple1.txt",ThermoCouple1+",");
		tmrDelay(500);//was 250
	}
}

function TECLag( lagtime )
{
	Debug( "TEC10-17 lag for " + lagtime + " seconds" );

	acctime = 0;
	chktime = lagtime * 1000;
	while( acctime<chktime )
	{
		tmrDelay(100);
		acctime += 100;
	}
}

function TECDwell( dwelltime )
{
	Debug( "TEC10-17 dwell for " + dwelltime + " seconds" );

	acctime = 0;
	chktime = dwelltime * 1000;
	while( acctime<chktime )
	{
    ThermoCouple1 = mccReadTemperature("0",0,0);
    outAppendToOutputFile("ThermoCouple1.txt",ThermoCouple1+",");
		tmrDelay(500);//was 250
		acctime += 500;
	}
}

function Debug( str )
{
	if( DebugOutput )
		outPrintToConsole( MacroName + " " + str );
}
