
//
// ICS process macro
//

// Assign macro name
MacroName = "qPCR8Well";

// Assign version
// 1.00 - RRM initial version
// 1.01 - rrm add support for 8 well PCR with retries on optics reads
// 1.02 - rrm add check for robot position
// 2.00 - rrm add "end of reaction" detection intelligence
// 2.01 - rrm fix bug when all tecs are disabled so script can finish
//        add user input dialog
MacroVersion = "2.01";

// Include show properties
#include <c:\\ICSMacros\\ICSShowProps.pmc>

// Enable debug output
DebugOutput = true;
// set the process bay
propProcessBay = 1;
// Announce who we are
Debug( "***************************************************************" );
Debug( "V" + MacroVersion );

// Call this to show the passed in property values
ShowProperties();

try
{
  userInput = inpGetStringInput( "qPCR For 8 Wells", "Begin Experiment?","yes" );
  if( userInput.toUpperCase()=="YES" )
	  continueToRun = true;
  else
	  continueToRun = false;

  OutputLabel.text = MacroName + " - TEC10-17" + propCycTECCycles + " from: " + propCycTECLoSP + " to: " + propCycTECHiSP;
  //Delete any output files if they exist
  outDeleteOutputFile("VolpiOutputTEC1Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC1Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC2Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC2Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC3Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC3Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC4Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC4Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC5Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC5Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC6Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC6Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC7Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC7Ch3.txt");
  outDeleteOutputFile("VolpiOutputTEC8Ch1.txt");
  outDeleteOutputFile("VolpiOutputTEC8Ch3.txt");
  outDeleteOutputFile("ThermoCouple1.txt");
  //create Baseline arrays
  var ArrOpticsCh1BaseLine = new Array(0,0,0,0,0,0,0,0);
  var ArrOpticsCh3BaseLine = new Array(0,0,0,0,0,0,0,0);
  //create array of booleans to determine if TEC is on or off
  var ArrTECisOn = new Array(1,1,1,1,1,1,1,1);
  
  // Move Robot to first well
  rbtMoveBothAbsolute(8910,115,0);
  //Enzyme Activation
  TECtoTarget(propCycTECHiSP, propCycTECHiRR);
  //Hold for 3 minutes
  TECDwell(180);  
  // Run the cycles
  for( cycle=1; cycle<=propCycTECCycles; cycle++ )
  {
    Debug( "TEC10-17 cycle " + cycle + " of " + propCycTECCycles );
	
    // Get TEC to Hi
    OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 to " + propCycTECHiSP;
    TECtoTarget( propCycTECHiSP, propCycTECHiRR );

    // Dwell TEC at high
    OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 dwell " + propCycTECHiDW;
    TECDwell( propCycTECHiDW );

    // Get TEC to Low
    OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 to " + propCycTECLoSP;
    TECtoTarget( propCycTECLoSP, propCycTECLoRR );
    // Dwell TEC at low
    OutputLabel.text = "Cycle: " + cycle + " of " + propCycTECCycles + " TEC10-17 dwell " + propCycTECLoDW;
    TECDwell( propCycTECLoDW );
    //cycle thru the enabled wells, taking optics readings...
    for(TecNum = 0;TecNum<8;TecNum++)
    {
      //Check robot position
      CheckRobotPosition(TecNum);
      //don't measure if well is complete
      if(ArrTECisOn[TecNum] == 1)
      {
        //Take an optics reading for channel 1
        MeasureOpticsChannel("1");
        //get the value for this channel
        opticsChannel1 = optGetMeasureMean();
        if(cycle < 6)
        {
	  //sum for calculating average baseline
          ArrOpticsCh1BaseLine[TecNum] += opticsChannel1;
        }
        Debug("TEC1"+(TecNum)+" Channel 1 Optics Measurement " + opticsChannel1);
        filename = "VolpiOutputTEC"+(TecNum + 1)+"Ch1.txt";
        outAppendToOutputFile(filename,opticsChannel1+",");
        //Take an optics reading for channel 3
        MeasureOpticsChannel("3");
        //get the value for this channel
        opticsChannel3 = optGetMeasureMean();
        if(cycle < 6)
        {
	  //sum for calculating average baseline
          ArrOpticsCh3BaseLine[TecNum] += opticsChannel3;
        }
        Debug("TEC1"+(TecNum)+" Channel 3 Optics Measurement " + opticsChannel3);
        filename = "VolpiOutputTEC"+(TecNum+1)+"Ch3.txt";
        outAppendToOutputFile(filename,opticsChannel3+",");
        //on the 5th cycle, compute average baseline
        if(cycle == 5)
        {
          ArrOpticsCh1BaseLine[TecNum] = ArrOpticsCh1BaseLine[TecNum]/5;
          ArrOpticsCh3BaseLine[TecNum] = ArrOpticsCh3BaseLine[TecNum]/5;
          Debug("TEC1"+(TecNum)+" Average Baseline CH1 " + ArrOpticsCh1BaseLine[TecNum]);
          Debug("TEC1"+(TecNum)+" Average BaseLine CH3 " + ArrOpticsCh3BaseLine[TecNum]);
        }
        if(cycle > 5)
        {
          //check for completion of this well
    	  //first calculate normalized base line for this well
	  NormalizedBaseline = ArrOpticsCh1BaseLine[TecNum]/ArrOpticsCh3BaseLine[TecNum];
	  //next calculate the normalized datapoint for this well
	  NormalizedReading = opticsChannel1/opticsChannel3;
	  //if the normalized reading is > than 2x the normalized baseline then we are done...
	  Debug("Normalized Baseline = "+NormalizedBaseline+" Normalized Reading = "+NormalizedReading);
	  if(NormalizedReading > (2*NormalizedBaseline))
	  {	  
	    Debug("TEC1"+TecNum+" is complete!");
	    ArrTECisOn[TecNum]=0;
            // determine if experiment complete...
            tecsOn = 0;
            for(i=0;i<8;i++)
            {
              tecsOn += ArrTECisOn[i];
            }
            if(tecsOn == 0)
            {
              Debug("Experiment Complete!");
              break;
            }
	  }
        }
      }//End if(ArrTECisOn[TecNum]==1)
      if(TecNum < 7)
      {
        //move to next well
        rbtMoveYRelative(790,0);
      }else{
        rbtMoveBothAbsolute(8910,115,0);//back to well 10
      }
      //delay
      tmrDelay(1000);   
    } 
    // Lag TEC at Lo
    TECLag( propCycTECLoLT );
  }
}
finally
{
  // When done turn off the TEC
  tecEnable( "TEC10", false );
  tecEnable( "TEC11", false );
  tecEnable( "TEC12", false );
  tecEnable( "TEC13", false );
  tecEnable( "TEC14", false );
  tecEnable( "TEC15", false );
  tecEnable( "TEC16", false );
  tecEnable( "TEC17", false );
  //Home the robot
  rbtHomeBoth(0);
  OutputLabel.text = MacroName + " - Complete";
}

function CheckRobotPosition(index)
{
  currentYpos = rbtGetYPosition();
  correctYpos = 115 + index * 790;
  if((currentYpos > (correctYpos - 10))&&(currentYpos < (correctYpos + 10)))
  {
    Debug("Robot @ Correct position");
  }
  else
  {
    Debug("ERROR! - Robot @ position " + currentYpos);
    rbtMoveBothAbsolute(8910,correctYpos,0);
    tmrDelay(1000); 
  }
}

function TECtoTarget( target, ramprate )
{
  //init lastTECname
  lastTECname = "";
  //configure target set-point and ramprate
  tecSetPoint( "TEC10", target, ramprate );
  tecSetPoint( "TEC11", target, ramprate );
  tecSetPoint( "TEC12", target, ramprate );
  tecSetPoint( "TEC13", target, ramprate );
  tecSetPoint( "TEC14", target, ramprate );
  tecSetPoint( "TEC15", target, ramprate );
  tecSetPoint( "TEC16", target, ramprate );
  tecSetPoint( "TEC17", target, ramprate );
  for(index = 0;index < 8;index++)
  {
    tecName = "TEC1" + index;
    if(ArrTECisOn[index] == 1)
    {
      Debug( "Enabling "+tecName+" to " + target + " @ " + ramprate );
      tecEnable(tecName,true);
      lastTECname = "TEC1"+index;
    }else{
      Debug( "Disabling "+tecName);
      tecEnable(tecName,false);
    }
  }	
  templo = target-2;
  temphi = target+2;
  temp = -900;
  while( (temp<=templo) || (temp>=temphi) )
  {
    temp = tecReadTemperature( lastTECname );
    ThermoCouple1 = mccReadTemperature("0",0,0);
    outAppendToOutputFile("ThermoCouple1.txt",ThermoCouple1+",");
    tmrDelay(500);//was 250
  }
}

function TECLag( lagtime )
{
  Debug( "TEC10-17 lag for " + lagtime + " seconds" );

  acctime = 0;
  chktime = lagtime * 1000;
  while( acctime<chktime )
  {
    tmrDelay(100);
    acctime += 100;
  }
}

function TECDwell( dwelltime )
{
  Debug( "TEC10-17 dwell for " + dwelltime + " seconds" );

  acctime = 0;
  chktime = dwelltime * 1000;
  while( acctime<chktime )
  {
    ThermoCouple1 = mccReadTemperature("0",0,0);
    outAppendToOutputFile("ThermoCouple1.txt",ThermoCouple1+",");
    tmrDelay(500);//was 250
    acctime += 500;
  }
}

function MeasureOpticsChannel(ChanName)
{
  while(optMeasure(ChanName,0.300)!=true)
  {
    Debug("optMeasure returned false on CH"+ChanName);
    tmrDelay(300);
  }
}

function Debug( str )
{
  if( DebugOutput )
    outPrintToConsole( MacroName + " " + str );
}
